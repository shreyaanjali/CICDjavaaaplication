@Library('my-shared-library') _

pipeline {
    agent any

    parameters{
        choice(name:'action', choices: 'create\ndelete', description: 'Choose create/Destroy')
        String(name:'Imagename', description: "name of the docker build", defaultvalue: 'javaapp')
        String(name:'ImageTag', description: "name of the docker build tag", defaultvalue: 'v1')
        String(name:'AppName', description: "name of the docker build project", defaultvalue: 'spring boot app')

    }

    stages{


        
        stage('Git Checkout') {
            when { expression { params.action == 'create' }}
            steps{
            gitCheckout(
                branch: "main",
                url: "https://github.com/shreyaanjali/CICDjavaaaplication.git"
                    )   
                }
            }

            stage('Unit Test maven'){
            when { expression { params.action == 'create' }}

            steps{
               script{

                mvnTest()

                }  
            }
        }
        stage('Integration Test Test maven'){
            when { expression { params.action == 'create' }}

            steps{
               script{

                mvnIntegrationTest()

                }  
            }
        }

        stage('Static code analysis: Sonarqube'){
            when { expression { params.action == 'create' }}

            steps{
               script{

                def SonarQubecredentitalsId = 'Sonar-api'
                staticCodeAnalysis(SonarQubecredentitalsId)

                }  
            }
        }
        stage('Maven Build : maven'){
            when { expression { params.action == 'create' }}

            steps{
               script{

                 mvnBuild()

                }  
            }
        }

        stage('Docker Image Build stage'){
            when { expression { params.action == 'create' }}

            steps{
               script{

                dockerBuild("${params.Imagename}","${params.ImageTag}","${params.AppName}")

                }  
            }
        }

    }
        /*post {
            always {
                
                cleanWs()
            }
        }
        */

    }


